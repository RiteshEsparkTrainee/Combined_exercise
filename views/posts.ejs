<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Posts</title>
</head>
<style>
    .table
    {
        border: 1px solid black;
        border-collapse: collapse;
    }
    td{
        border: 1px solid black;
        text-align: center;
    }
    th{
        border: 2px solid black;
        background-color: green;
    }
    .pagination
    {
        text-align: center;
        margin-bottom: 5px;
    }
    h2{
        text-align: center;
    }
    #search_button
    {
        background-color: green;
        border: 2px solid black;
        border-radius: 7px;
        color: white;
        font-weight: bold;
    }
    #postSearch
    {
        border: 1px solid black;
    }
</style>
<body>
    <h1>Jaiswal Ritesh : 24DEV068</h1>
    <h2>User all post</h2>
    
    <input type="text" id="postSearch" name="postSearch" placeholder="Enter search text">
    <input type="button" id="search_button" value="Search">
   
    <div class="pagination">
        <button id="moveLeftInitial" onclick="moveLeftInitial()"><<</button>
        <button id="moveLeft" onclick="moveLeft()"><</button>
        <span id="currPage">1</span>
        <button id="moveRight" onclick="moveRight()">></button>
        <button id="moveRightLast" onclick="moveRightLast()">>></button>
    </div>
    <table id="postTable" class="table">
        <thead>
            <tr>
                <th>Index</th>
                <th>Title</th>
                <th>Body</th>
            </tr>
        </thead>
        <tbody id="postBody"></tbody>
    </table>
    <script>
        var currentPage = 1;
        var lastPage = 1;
        var fetchBySearch = false;
        var allPostsData = []; // Variable to store fetched data

     
        const fetchAllPosts = async () => {
            try {
                const response = await fetch('https://jsonplaceholder.typicode.com/posts');
                allPostsData = await response.json();
                updatePostsTable();
            } catch (error) {
                console.error('Error fetching posts:', error);
            }
        };

        // Function to update the posts table based on current page
        const updatePostsTable = () => {
            const postItems = document.getElementById('postBody');
            postItems.innerHTML = '';

            const perPage = 10;
            const basePage = (currentPage - 1) * perPage;
            const slicedData = allPostsData.slice(basePage, basePage + perPage);

            slicedData.forEach(element => {
                const row = postItems.insertRow();
                let cell1 = row.insertCell(0);
                let cell2 = row.insertCell(1);
                let cell3 = row.insertCell(2);

                cell1.textContent = element.id;
                cell2.textContent = element.title;
                cell3.textContent = element.body;
            });

            lastPage = Math.ceil(allPostsData.length / perPage);
            updateButtonState();
        };

        
        const handleSearch = async () => {
            const searchText = document.getElementById('postSearch').value;
            try {
                const response = await fetch(`https://jsonplaceholder.typicode.com/posts?q=${searchText}`);
                allPostsData = await response.json();
                updatePostsTable();
            } catch (error) {
                console.error('Error searching posts:', error);
            }
        };

    
        fetchAllPosts();

        
        document.getElementById('search_button').addEventListener('click', handleSearch);

     
        function moveLeftInitial() {
            currentPage = 1;
            document.getElementById('currPage').innerHTML = currentPage;
            updatePostsTable();
        }

        function moveLeft() {
            if (currentPage > 1)
                currentPage--;
            document.getElementById('currPage').innerHTML = currentPage;
            updatePostsTable();
        }

        function moveRight() {
            if (currentPage < lastPage) {
                currentPage++;
                document.getElementById('currPage').innerHTML = currentPage;
                updatePostsTable();
            }
        }

        function moveRightLast() {
            if (currentPage < lastPage) {
                currentPage = lastPage;
                document.getElementById('currPage').innerHTML = currentPage;
                updatePostsTable();
            }
        }

        // Function to update button state
        function updateButtonState() {
            const moveLeftInitial = document.getElementById('moveLeftInitial');
            const moveLeft = document.getElementById('moveLeft');
            const moveRight = document.getElementById('moveRight');
            const moveRightLast = document.getElementById('moveRightLast');

            moveLeftInitial.disabled = currentPage === 1;
            moveLeft.disabled = currentPage === 1;
            moveRight.disabled = currentPage === lastPage;
            moveRightLast.disabled = currentPage === lastPage;
        }
    </script>
</body>
</html>
